{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { jwtDecode } from \"jwt-decode\";\nexport let ManageOrdersComponent = class ManageOrdersComponent {\n  constructor(orderService, authService) {\n    this.orderService = orderService;\n    this.authService = authService;\n    this.orders = [];\n    this.orderNumber = 0; // Initialize with a default number\n    this.courierId = 0; // Initialize with a default number\n    this.role = \" \";\n    const token = this.authService.getToken();\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      this.role = decodedToken.role;\n      console.log(\"test1:\" + this.role);\n    } else {\n      console.log(\"test2:\" + this.role);\n    }\n  }\n  isAdmin() {\n    if (this.role === \"admin\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  ngOnInit() {\n    this.loadOrders();\n  }\n  loadOrders() {\n    this.orderService.getOrders().subscribe(data => {\n      this.orders = data;\n    });\n  }\n  updateStatus(orderId, newStatus) {\n    this.orderService.updateOrderStatus(orderId, newStatus).subscribe({\n      next: response => {\n        console.log('Status updated successfully', response);\n        this.loadOrders(); // Reload orders to reflect the updated status\n        alert('Order status updated successfully!'); // Notify user of success\n      },\n\n      error: error => {\n        console.error('Error updating order status:', error);\n        alert('Error updating order status: ' + error.message); // Notify user of error\n      }\n    });\n  }\n\n  assignCourier(orderId, courierId) {\n    this.orderService.assignCourierToOrder(orderId, courierId).subscribe({\n      next: response => {\n        console.log('Courier assigned successfully', response);\n        this.loadOrders(); // Reload orders to reflect the assigned courier\n        alert('Courier assigned successfully!'); // Notify user of success\n      },\n\n      error: error => {\n        console.error('Error assigning courier:', error);\n        alert('Error assigning courier: ' + error.message); // Notify user of error\n      }\n    });\n  }\n\n  deleteOrder(orderId) {\n    this.orderService.deleteOrder(orderId).subscribe(response => {\n      this.loadOrders();\n    });\n  }\n};\nManageOrdersComponent = __decorate([Component({\n  selector: 'app-manage-orders',\n  templateUrl: './manage-orders.component.html',\n  styleUrls: ['./manage-orders.component.css']\n})], ManageOrdersComponent);","map":{"version":3,"names":["Component","jwtDecode","ManageOrdersComponent","constructor","orderService","authService","orders","orderNumber","courierId","role","token","getToken","decodedToken","console","log","isAdmin","ngOnInit","loadOrders","getOrders","subscribe","data","updateStatus","orderId","newStatus","updateOrderStatus","next","response","alert","error","message","assignCourier","assignCourierToOrder","deleteOrder","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\imoha\\Desktop\\Package_Tracking_System\\frontend\\src\\app\\components\\manage-orders\\manage-orders.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from 'src/app/auth.service';\r\nimport { OrderService } from 'src/app/order.service';\r\nimport { jwtDecode } from \"jwt-decode\";\r\n@Component({\r\n  selector: 'app-manage-orders',\r\n  templateUrl: './manage-orders.component.html',\r\n  styleUrls: ['./manage-orders.component.css']\r\n})\r\nexport class ManageOrdersComponent implements OnInit {\r\n  orders: any[] = [];\r\n  orderNumber: number = 0; // Initialize with a default number\r\n  courierId: number = 0; // Initialize with a default number\r\n  role:string=\" \";\r\n  constructor(private orderService: OrderService, private authService: AuthService) {\r\n    const token = this.authService.getToken();\r\n    if (token) {\r\n      const decodedToken: any = jwtDecode(token);\r\n      this.role = decodedToken.role; \r\n      console.log(\"test1:\"+this.role)\r\n    }\r\n    else{ \r\n      console.log(\"test2:\"+this.role)\r\n    }\r\n\r\n  }\r\n\r\n isAdmin(){\r\n  if(this.role===\"admin\"){\r\n    return true;\r\n  }\r\n  else{\r\n    return false;\r\n  }\r\n }\r\n \r\n\r\n  ngOnInit() {\r\n    this.loadOrders();\r\n  }\r\n\r\n  loadOrders() {\r\n    this.orderService.getOrders().subscribe(data => {\r\n      this.orders = data;\r\n    });\r\n  }\r\n \r\n  updateStatus(orderId: number, newStatus: string) {\r\n    this.orderService.updateOrderStatus(orderId, newStatus).subscribe({\r\n      next: response => {\r\n        console.log('Status updated successfully', response);\r\n        this.loadOrders(); // Reload orders to reflect the updated status\r\n        alert('Order status updated successfully!'); // Notify user of success\r\n      },\r\n      error: error => {\r\n        console.error('Error updating order status:', error);\r\n        alert('Error updating order status: ' + error.message); // Notify user of error\r\n      }\r\n    });\r\n  }\r\n\r\n  assignCourier(orderId: number, courierId: number) {\r\n    this.orderService.assignCourierToOrder(orderId, courierId).subscribe({\r\n      next: response => {\r\n        console.log('Courier assigned successfully', response);\r\n        this.loadOrders(); // Reload orders to reflect the assigned courier\r\n        alert('Courier assigned successfully!'); // Notify user of success\r\n      },\r\n      error: error => {\r\n        console.error('Error assigning courier:', error);\r\n        alert('Error assigning courier: ' + error.message); // Notify user of error\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n\r\n  deleteOrder(orderId: number) {\r\n    this.orderService.deleteOrder(orderId).subscribe(response => {\r\n      this.loadOrders();\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}