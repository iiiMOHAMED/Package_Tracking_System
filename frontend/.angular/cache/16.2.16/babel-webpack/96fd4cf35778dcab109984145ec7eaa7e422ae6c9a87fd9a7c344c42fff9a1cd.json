{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://backend:8080'; // Replace with your backend URL\n  }\n\n  getOrders() {\n    return this.http.get(`${this.apiUrl}/orders/retrieve`);\n  }\n  updateOrderStatus(orderId, newStatus) {\n    return this.http.put(`${this.apiUrl}/orders/update/${orderId}`, {\n      status: newStatus\n    });\n  }\n  deleteOrder(orderId) {\n    return this.http.delete(`${this.apiUrl}/orders/delete/${orderId}`);\n  }\n  assignCourierToOrder(orderId, courierId) {\n    return this.http.put(`${this.apiUrl}/orders/assign/${orderId}`, {\n      courier_id: courierId\n    });\n  }\n  assignCourierToOrder2(orderId, courierId) {\n    return this.http.put(`${this.apiUrl}/orders/assign/${orderId}`, {\n      courier_id: courierId\n    });\n  }\n  getUserOrders(userId) {\n    return this.http.get(`${this.apiUrl}/orders/users/${userId}`);\n  }\n  getOrderDetails(orderNumber) {\n    return this.http.get(`${this.apiUrl}/orders/${orderNumber}`);\n  }\n  clearCourier(orderId, newStatus) {\n    return this.http.put(`${this.apiUrl}/couriers/${orderId}`, {\n      status: newStatus\n    });\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["OrderService","constructor","http","apiUrl","getOrders","get","updateOrderStatus","orderId","newStatus","put","status","deleteOrder","delete","assignCourierToOrder","courierId","courier_id","assignCourierToOrder2","getUserOrders","userId","getOrderDetails","orderNumber","clearCourier","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/app/src/app/order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderService {\r\n  private apiUrl = 'http://backend:8080'; // Replace with your backend URL\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getOrders(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/orders/retrieve`);\r\n  }\r\n\r\n  updateOrderStatus(orderId: number, newStatus: string): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/orders/update/${orderId}`, { status: newStatus });\r\n  }\r\n \r\n\r\n  deleteOrder(orderId: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/orders/delete/${orderId}`);\r\n  }\r\n\r\n  assignCourierToOrder(orderId: number, courierId: number|null|{ courier_id: null }): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/orders/assign/${orderId}`, { courier_id: courierId });\r\n  }\r\n\r\n  assignCourierToOrder2(orderId: number, courierId:{ courier_id: null }): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/orders/assign/${orderId}`, { courier_id: courierId });\r\n  }\r\n   \r\n   getUserOrders(userId: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/orders/users/${userId}`);\r\n  }\r\n\r\n  getOrderDetails(orderNumber: number): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/orders/${orderNumber}`);\r\n  }\r\n\r\n  clearCourier(orderId: number, newStatus: string): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/couriers/${orderId}`, { status: newStatus });\r\n  }\r\n  \r\n\r\n\r\n}\r\n"],"mappings":";;AAOA,OAAM,MAAOA,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,qBAAqB,CAAC,CAAC;EAED;;EAEvCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,kBAAkB,CAAC;EAC/D;EAEAG,iBAAiBA,CAACC,OAAe,EAAEC,SAAiB;IAClD,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACN,MAAM,kBAAkBI,OAAO,EAAE,EAAE;MAAEG,MAAM,EAAEF;IAAS,CAAE,CAAC;EACxF;EAGAG,WAAWA,CAACJ,OAAe;IACzB,OAAO,IAAI,CAACL,IAAI,CAACU,MAAM,CAAC,GAAG,IAAI,CAACT,MAAM,kBAAkBI,OAAO,EAAE,CAAC;EACpE;EAEAM,oBAAoBA,CAACN,OAAe,EAAEO,SAA2C;IAC/E,OAAO,IAAI,CAACZ,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACN,MAAM,kBAAkBI,OAAO,EAAE,EAAE;MAAEQ,UAAU,EAAED;IAAS,CAAE,CAAC;EAC5F;EAEAE,qBAAqBA,CAACT,OAAe,EAAEO,SAA8B;IACnE,OAAO,IAAI,CAACZ,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACN,MAAM,kBAAkBI,OAAO,EAAE,EAAE;MAAEQ,UAAU,EAAED;IAAS,CAAE,CAAC;EAC5F;EAECG,aAAaA,CAACC,MAAc;IAC3B,OAAO,IAAI,CAAChB,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,iBAAiBe,MAAM,EAAE,CAAC;EACtE;EAEAC,eAAeA,CAACC,WAAmB;IACjC,OAAO,IAAI,CAAClB,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,WAAWiB,WAAW,EAAE,CAAC;EAC9D;EAEAC,YAAYA,CAACd,OAAe,EAAEC,SAAiB;IAC7C,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACN,MAAM,aAAaI,OAAO,EAAE,EAAE;MAAEG,MAAM,EAAEF;IAAS,CAAE,CAAC;EACnF;;;uBApCWR,YAAY,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZzB,YAAY;MAAA0B,OAAA,EAAZ1B,YAAY,CAAA2B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}