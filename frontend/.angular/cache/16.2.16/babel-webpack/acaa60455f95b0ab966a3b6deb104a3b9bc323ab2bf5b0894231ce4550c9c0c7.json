{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n  }\n  login(email, password) {\n    const data = this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    });\n    return data;\n  }\n  storeToken(token) {\n    localStorage.setItem(\"token\", token); // Store the token in local storage\n  }\n\n  getToken() {\n    return localStorage.getItem(\"token\"); // Retrieve the token\n  }\n\n  logout() {\n    localStorage.removeItem(\"token\"); // Remove the token\n  }\n\n  isLoggedIn() {\n    return this.getToken() !== null; // Check if the user is logged in\n  }\n  // You can create an interceptor to add the token to each request if needed\n  getHeaders() {\n    return new HttpHeaders({\n      Authorization: `Bearer ${this.getToken()}` // Attach the token to the headers\n    });\n  }\n\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","AuthService","constructor","http","apiUrl","login","email","password","data","post","storeToken","token","localStorage","setItem","getToken","getItem","logout","removeItem","isLoggedIn","getHeaders","Authorization","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/app/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:8080'; \r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    const data = this.http.post<any>(`${this.apiUrl}/login`, {\r\n      email,\r\n      password,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  storeToken(token: string): void {\r\n    localStorage.setItem(\"token\", token); // Store the token in local storage\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(\"token\"); // Retrieve the token\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(\"token\"); // Remove the token\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.getToken() !== null; // Check if the user is logged in\r\n  }\r\n\r\n  // You can create an interceptor to add the token to each request if needed\r\n  getHeaders(): HttpHeaders {\r\n    return new HttpHeaders({\r\n      Authorization: `Bearer ${this.getToken()}`, // Attach the token to the headers\r\n    });\r\n  }\r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAED;EAEvCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,IAAI,GAAG,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAE;MACvDE,KAAK;MACLC;KACD,CAAC;IACF,OAAOC,IAAI;EACb;EAEAE,UAAUA,CAACC,KAAa;IACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC,CAAC;EACxC;;EAEAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EACxC;;EAEAC,MAAMA,CAAA;IACJJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACpC;;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACJ,QAAQ,EAAE,KAAK,IAAI,CAAC,CAAC;EACnC;EAEA;EACAK,UAAUA,CAAA;IACR,OAAO,IAAInB,WAAW,CAAC;MACrBoB,aAAa,EAAE,UAAU,IAAI,CAACN,QAAQ,EAAE,EAAE,CAAE;KAC7C,CAAC;EACJ;;;;uBAlCWb,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXvB,WAAW;MAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}