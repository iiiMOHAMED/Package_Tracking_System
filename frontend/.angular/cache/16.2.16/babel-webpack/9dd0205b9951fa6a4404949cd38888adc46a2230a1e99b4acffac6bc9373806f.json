{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/imoha/Desktop/Package_Tracking_System/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { lastValueFrom } from \"rxjs\";\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, fb, router) {\n    this.authService = authService;\n    this.fb = fb;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.apiUrl = 'http://localhost:8080/login';\n    this.loginForm = this.fb.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onLogin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.loginForm.valid) {\n        try {\n          const response = yield lastValueFrom(_this.authService.login(_this.loginForm.value.email, _this.loginForm.value.password));\n          _this.authService.storeToken(response.access_token);\n          console.log(\"testin ali:\" + response.access_token);\n          _this.router.navigate([\"/\"]);\n        } catch (err) {\n          console.error(\"Login failed\", err);\n        }\n      } else {\n        console.log(\"Form is invalid\");\n      }\n    })();\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  imports: [CommonModule, ReactiveFormsModule]\n})], LoginComponent);\n/* onSubmit() {\n   const credentials = {\n     email: this.email,\n     password: this.password,\n   };\n\n   this.http.post(this.apiUrl, credentials).subscribe({\n     next: () => alert('Login successful!'),\n     error: (err) => alert('Login failed: ' + err.error)\n   });\n } */","map":{"version":3,"names":["Component","ReactiveFormsModule","Validators","CommonModule","lastValueFrom","LoginComponent","constructor","authService","fb","router","email","password","apiUrl","loginForm","group","required","minLength","onLogin","_this","_asyncToGenerator","valid","response","login","value","storeToken","access_token","console","log","navigate","err","error","__decorate","selector","templateUrl","imports"],"sources":["C:\\Users\\imoha\\Desktop\\Package_Tracking_System\\frontend\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthService } from 'src/app/auth.service';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { lastValueFrom } from \"rxjs\";\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  imports: [CommonModule, ReactiveFormsModule]\r\n})\r\nexport class LoginComponent {\r\n  email: string = '';\r\n  password: string = '';\r\n  private apiUrl = 'http://localhost:8080/login';\r\n  loginForm: FormGroup;\r\n  \r\n  constructor(private authService: AuthService,private fb: FormBuilder,private router: Router)\r\n  {\r\n    this.loginForm = this.fb.group({\r\n    email: [\"\", [Validators.required, Validators.email]],\r\n    password: [\"\", [Validators.required, Validators.minLength(6)]],\r\n  });\r\n}\r\n  \r\n  async onLogin() {\r\n    if (this.loginForm.valid) {\r\n      try {\r\n        const response = await lastValueFrom(\r\n          this.authService.login(\r\n            this.loginForm.value.email,\r\n            this.loginForm.value.password\r\n          )\r\n        );\r\n        \r\n        this.authService.storeToken(response.access_token);\r\n        console.log(\"testin ali:\"+response.access_token)\r\n        this.router.navigate([\"/\"]);\r\n      } catch (err) {\r\n        console.error(\"Login failed\", err);\r\n        \r\n      }\r\n    } else {\r\n      console.log(\"Form is invalid\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n \r\n  }\r\n  \r\n\r\n /* onSubmit() {\r\n    const credentials = {\r\n      email: this.email,\r\n      password: this.password,\r\n    };\r\n\r\n    this.http.post(this.apiUrl, credentials).subscribe({\r\n      next: () => alert('Login successful!'),\r\n      error: (err) => alert('Login failed: ' + err.error)\r\n    });\r\n  } */\r\n\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAAiCC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AAExF,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,aAAa,QAAQ,MAAM;AAM7B,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YAAoBC,WAAwB,EAASC,EAAe,EAASC,MAAc;IAAvE,KAAAF,WAAW,GAAXA,WAAW;IAAsB,KAAAC,EAAE,GAAFA,EAAE;IAAsB,KAAAC,MAAM,GAANA,MAAM;IALnF,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACb,KAAAC,MAAM,GAAG,6BAA6B;IAK5C,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC/BJ,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACQ,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEQC,OAAOA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACX,IAAID,KAAI,CAACL,SAAS,CAACO,KAAK,EAAE;QACxB,IAAI;UACF,MAAMC,QAAQ,SAASjB,aAAa,CAClCc,KAAI,CAACX,WAAW,CAACe,KAAK,CACpBJ,KAAI,CAACL,SAAS,CAACU,KAAK,CAACb,KAAK,EAC1BQ,KAAI,CAACL,SAAS,CAACU,KAAK,CAACZ,QAAQ,CAC9B,CACF;UAEDO,KAAI,CAACX,WAAW,CAACiB,UAAU,CAACH,QAAQ,CAACI,YAAY,CAAC;UAClDC,OAAO,CAACC,GAAG,CAAC,aAAa,GAACN,QAAQ,CAACI,YAAY,CAAC;UAChDP,KAAI,CAACT,MAAM,CAACmB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;SAC5B,CAAC,OAAOC,GAAG,EAAE;UACZH,OAAO,CAACI,KAAK,CAAC,cAAc,EAAED,GAAG,CAAC;;OAGrC,MAAM;QACLH,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;IAC/B;EACH;CAKC;AAvCUtB,cAAc,GAAA0B,UAAA,EAL1B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,OAAO,EAAE,CAAC/B,YAAY,EAAEF,mBAAmB;CAC5C,CAAC,C,EACWI,cAAc,CAuCxB;AAGF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}