{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { jwtDecode } from \"jwt-decode\";\nexport let CourierComponent = class CourierComponent {\n  constructor(http, courierService, orderService, authService) {\n    this.http = http;\n    this.courierService = courierService;\n    this.orderService = orderService;\n    this.authService = authService;\n    this.pickupLocation = '';\n    this.dropOffLocation = '';\n    this.packageDetails = '';\n    this.deliveryTime = '';\n    this.apiUrl = 'http://localhost:8080/orders';\n    this.userId = null;\n    ////////////////\n    this.courierId = 0;\n    this.orders = [];\n    this.errorMessage = '';\n    this.role = '';\n    const token = this.authService.getToken();\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      this.courierId = decodedToken.sub;\n      this.role = decodedToken.role;\n      console.log(\"test1:\" + this.courierId);\n      console.log(\"test1:\" + this.role);\n    } else {\n      console.log(\"test2:\" + this.courierId);\n      console.log(\"test2:\" + this.role);\n    }\n  }\n  isCourier() {\n    if (this.role === \"courier\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  ngOnInit() {\n    this.load();\n  }\n  load() {\n    // Get orders for the current user\n    this.courierService.getCourierOrders(this.courierId).subscribe({\n      next: data => {\n        this.orders = data; // Successfully received orders\n      },\n\n      error: error => {\n        this.errorMessage = 'There was an error retrieving orders.'; // Handle error\n        console.error(error); // Log the error for debugging\n      },\n\n      complete: () => {\n        console.log('Courier orders fetch complete'); // Optionally log completion\n      }\n    });\n  }\n\n  updateStatus(orderId, newStatus) {\n    this.orderService.updateOrderStatus(orderId, newStatus).subscribe({\n      next: response => {\n        console.log('Status updated successfully', response);\n        this.ngOnInit(); // Reload orders to reflect the updated status\n        alert('Order status updated successfully!'); // Notify user of success\n      },\n\n      error: error => {\n        console.error('Error updating order status:', error);\n        alert('Error updating order status: ' + error.message); // Notify user of error\n      }\n    });\n  }\n\n  acceptOrder(orderId) {\n    this.orderService.updateOrderStatus(orderId, \"picked up\").subscribe({\n      next: response => {\n        console.log('Order accepted successfully', response);\n        this.ngOnInit(); // Reload orders to reflect the updated status\n        alert('Order status updated successfully!'); // Notify user of success\n      },\n\n      error: error => {\n        console.error('Error accepting order:', error);\n        alert('Error accepting order: ' + error.message); // Notify user of error\n      }\n    });\n  }\n\n  acceptOrder2(orderId) {\n    this.courierService.acceptOrder(orderId).subscribe({\n      next: () => {\n        alert('Order accepted successfully!');\n        this.ngOnInit(); // Refresh orders to update status\n      },\n\n      error: error => {\n        console.error('Error accepting order:', error);\n        console.log('ali:' + this.courierService.acceptOrder(orderId));\n        alert('Error accepting order: ' + (error.error?.message || error.message));\n      }\n    });\n  }\n  clearCourier(orderId) {\n    this.orderService.clearCourier(orderId, 'pending').subscribe({\n      next: response => {\n        console.log('Order declined successfully', response);\n        this.ngOnInit(); // Reload orders to reflect the updated status\n        alert('Order status updated successfully!'); // Notify user of success\n      },\n\n      error: error => {\n        console.error('Error declined order:', error);\n        alert('Error declined order: ' + error.message); // Notify user of error\n      }\n    });\n  }\n\n  declineOrder(orderId) {\n    // Create a payload to update the courier_id to null\n    const payload = {\n      courier_id: null\n    }; // courier_id is set to null\n    this.orderService.assignCourierToOrder2(orderId, payload).subscribe({\n      next: () => {\n        this.ngOnInit(); // Refresh orders to update status\n      },\n\n      error: error => {\n        console.error('Error declining order:', error);\n        alert('Error declining order: ' + error.message);\n      }\n    });\n  }\n  revive(orderId, order) {\n    this.deleteOrder(orderId);\n    this.reOrder(order);\n  }\n  deleteOrder(orderId) {\n    this.orderService.deleteOrder(orderId).subscribe(response => {\n      this.ngOnInit();\n    });\n  }\n  reOrder(order) {\n    this.http.post(this.apiUrl, order).subscribe({\n      next: () => {\n        alert('Order created successfully!');\n        this.ngOnInit();\n      },\n      error: err => alert('Failed to create order: ' + err.error)\n    });\n  }\n};\nCourierComponent = __decorate([Component({\n  selector: 'app-courier',\n  templateUrl: './courier.component.html',\n  styleUrls: ['./courier.component.css']\n})], CourierComponent);","map":{"version":3,"names":["Component","jwtDecode","CourierComponent","constructor","http","courierService","orderService","authService","pickupLocation","dropOffLocation","packageDetails","deliveryTime","apiUrl","userId","courierId","orders","errorMessage","role","token","getToken","decodedToken","sub","console","log","isCourier","ngOnInit","load","getCourierOrders","subscribe","next","data","error","complete","updateStatus","orderId","newStatus","updateOrderStatus","response","alert","message","acceptOrder","acceptOrder2","clearCourier","declineOrder","payload","courier_id","assignCourierToOrder2","revive","order","deleteOrder","reOrder","post","err","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\imoha\\Desktop\\Package_Tracking_System\\frontend\\src\\app\\courier\\courier.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { OrderService } from '../order.service';\r\nimport { AuthService } from '../auth.service';\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { CourierService } from '../courier.service';\r\nimport { HttpClient } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-courier',\r\n  templateUrl: './courier.component.html',\r\n  styleUrls: ['./courier.component.css']\r\n})\r\nexport class CourierComponent implements OnInit {\r\n  pickupLocation: string = '';\r\n  dropOffLocation: string = '';\r\n  packageDetails: string = '';\r\n  deliveryTime: string = '';\r\n  private apiUrl = 'http://localhost:8080/orders';\r\n  userId: number | null = null;\r\n  ////////////////\r\n  courierId: number= 0;\r\n  orders: any[] = [];\r\n  errorMessage: string = '';\r\n  role:string='';\r\n  constructor(private http: HttpClient, private courierService: CourierService,private orderService: OrderService, private authService: AuthService ) {\r\n      const token = this.authService.getToken();\r\n    if (token) {\r\n      const decodedToken: any = jwtDecode(token);\r\n      this.courierId = decodedToken.sub; \r\n      this.role=decodedToken.role;\r\n      console.log(\"test1:\"+this.courierId)\r\n      console.log(\"test1:\"+this.role)\r\n    }\r\n    else{ \r\n      console.log(\"test2:\"+this.courierId)\r\n      console.log(\"test2:\"+this.role)\r\n    }\r\n  }\r\n  isCourier(){\r\n    if(this.role===\"courier\"){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n      this.load();\r\n  }\r\n  load(){\r\n    // Get orders for the current user\r\n    this.courierService.getCourierOrders(this.courierId).subscribe({\r\n      next: (data) => {\r\n        this.orders = data; // Successfully received orders\r\n      },\r\n      error: (error) => {\r\n        this.errorMessage = 'There was an error retrieving orders.'; // Handle error\r\n        console.error(error); // Log the error for debugging\r\n      },\r\n      complete: () => {\r\n        console.log('Courier orders fetch complete'); // Optionally log completion\r\n      }\r\n    });\r\n  }\r\n  updateStatus(orderId: number, newStatus: string) {\r\n    this.orderService.updateOrderStatus(orderId, newStatus).subscribe({\r\n      next: response => {\r\n        console.log('Status updated successfully', response);\r\n        this.ngOnInit(); // Reload orders to reflect the updated status\r\n        alert('Order status updated successfully!'); // Notify user of success\r\n      },\r\n      error: error => {\r\n        console.error('Error updating order status:', error);\r\n        alert('Error updating order status: ' + error.message); // Notify user of error\r\n      }\r\n    });\r\n  }\r\n\r\n  acceptOrder(orderId: number) {\r\n    this.orderService.updateOrderStatus(orderId, \"picked up\").subscribe({\r\n      next: response => {\r\n        console.log('Order accepted successfully', response);\r\n        this.ngOnInit(); // Reload orders to reflect the updated status\r\n        alert('Order status updated successfully!'); // Notify user of success\r\n      },\r\n      error: error => {\r\n        console.error('Error accepting order:', error);\r\n        alert('Error accepting order: ' + error.message); // Notify user of error\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  acceptOrder2(orderId: number): void {\r\n    this.courierService.acceptOrder(orderId).subscribe({\r\n      next: () => {\r\n        alert('Order accepted successfully!');\r\n        this.ngOnInit(); // Refresh orders to update status\r\n      },\r\n      error: (error) => {\r\n        console.error('Error accepting order:', error);\r\n        console.log('ali:'+this.courierService.acceptOrder(orderId))\r\n        alert('Error accepting order: ' + (error.error?.message || error.message));\r\n      }\r\n    });\r\n  }\r\n  clearCourier(orderId:number){\r\n    this.orderService.clearCourier(orderId,'pending').subscribe({\r\n      next: response => {\r\n        console.log('Order declined successfully', response);\r\n        this.ngOnInit(); // Reload orders to reflect the updated status\r\n        alert('Order status updated successfully!'); // Notify user of success\r\n      },\r\n      error: error => {\r\n        console.error('Error declined order:', error);\r\n        alert('Error declined order: ' + error.message); // Notify user of error\r\n      }\r\n    })\r\n  }\r\n\r\n  declineOrder(orderId: number) {\r\n    // Create a payload to update the courier_id to null\r\n    const payload = { courier_id: null };  // courier_id is set to null\r\n    this.orderService.assignCourierToOrder2(orderId,payload).subscribe({\r\n      next: () => {\r\n        this.ngOnInit(); // Refresh orders to update status\r\n      },\r\n      error: (error) => {\r\n        console.error('Error declining order:', error);\r\n        alert('Error declining order: ' + error.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  revive(orderId: number,order:object){\r\n    this.deleteOrder(orderId);\r\n    this.reOrder(order);\r\n  }\r\n\r\n  deleteOrder(orderId: number) {\r\n    this.orderService.deleteOrder(orderId).subscribe(response => {\r\n      this.ngOnInit();\r\n    });\r\n  }\r\n  reOrder(order:object) {\r\n    \r\n    this.http.post(this.apiUrl, order).subscribe({\r\n      next: () => {alert('Order created successfully!')\r\n                  this.ngOnInit();\r\n      },\r\n      error: (err) => alert('Failed to create order: ' + err.error),\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAIjD,SAASC,SAAS,QAAQ,YAAY;AAQ/B,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAY3BC,YAAoBC,IAAgB,EAAUC,cAA8B,EAASC,YAA0B,EAAUC,WAAwB;IAA7H,KAAAH,IAAI,GAAJA,IAAI;IAAsB,KAAAC,cAAc,GAAdA,cAAc;IAAyB,KAAAC,YAAY,GAAZA,YAAY;IAAwB,KAAAC,WAAW,GAAXA,WAAW;IAXpI,KAAAC,cAAc,GAAW,EAAE;IAC3B,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,cAAc,GAAW,EAAE;IAC3B,KAAAC,YAAY,GAAW,EAAE;IACjB,KAAAC,MAAM,GAAG,8BAA8B;IAC/C,KAAAC,MAAM,GAAkB,IAAI;IAC5B;IACA,KAAAC,SAAS,GAAU,CAAC;IACpB,KAAAC,MAAM,GAAU,EAAE;IAClB,KAAAC,YAAY,GAAW,EAAE;IACzB,KAAAC,IAAI,GAAQ,EAAE;IAEV,MAAMC,KAAK,GAAG,IAAI,CAACX,WAAW,CAACY,QAAQ,EAAE;IAC3C,IAAID,KAAK,EAAE;MACT,MAAME,YAAY,GAAQnB,SAAS,CAACiB,KAAK,CAAC;MAC1C,IAAI,CAACJ,SAAS,GAAGM,YAAY,CAACC,GAAG;MACjC,IAAI,CAACJ,IAAI,GAACG,YAAY,CAACH,IAAI;MAC3BK,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAC,IAAI,CAACT,SAAS,CAAC;MACpCQ,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAC,IAAI,CAACN,IAAI,CAAC;KAChC,MACG;MACFK,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAC,IAAI,CAACT,SAAS,CAAC;MACpCQ,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAC,IAAI,CAACN,IAAI,CAAC;;EAEnC;EACAO,SAASA,CAAA;IACP,IAAG,IAAI,CAACP,IAAI,KAAG,SAAS,EAAC;MACvB,OAAO,IAAI;KACZ,MACG;MACF,OAAO,KAAK;;EAEhB;EAEAQ,QAAQA,CAAA;IACJ,IAAI,CAACC,IAAI,EAAE;EACf;EACAA,IAAIA,CAAA;IACF;IACA,IAAI,CAACrB,cAAc,CAACsB,gBAAgB,CAAC,IAAI,CAACb,SAAS,CAAC,CAACc,SAAS,CAAC;MAC7DC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACf,MAAM,GAAGe,IAAI,CAAC,CAAC;MACtB,CAAC;;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACf,YAAY,GAAG,uCAAuC,CAAC,CAAC;QAC7DM,OAAO,CAACS,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC;;MACDC,QAAQ,EAAEA,CAAA,KAAK;QACbV,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAC,CAAC;MAChD;KACD,CAAC;EACJ;;EACAU,YAAYA,CAACC,OAAe,EAAEC,SAAiB;IAC7C,IAAI,CAAC7B,YAAY,CAAC8B,iBAAiB,CAACF,OAAO,EAAEC,SAAS,CAAC,CAACP,SAAS,CAAC;MAChEC,IAAI,EAAEQ,QAAQ,IAAG;QACff,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEc,QAAQ,CAAC;QACpD,IAAI,CAACZ,QAAQ,EAAE,CAAC,CAAC;QACjBa,KAAK,CAAC,oCAAoC,CAAC,CAAC,CAAC;MAC/C,CAAC;;MACDP,KAAK,EAAEA,KAAK,IAAG;QACbT,OAAO,CAACS,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDO,KAAK,CAAC,+BAA+B,GAAGP,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC;MAC1D;KACD,CAAC;EACJ;;EAEAC,WAAWA,CAACN,OAAe;IACzB,IAAI,CAAC5B,YAAY,CAAC8B,iBAAiB,CAACF,OAAO,EAAE,WAAW,CAAC,CAACN,SAAS,CAAC;MAClEC,IAAI,EAAEQ,QAAQ,IAAG;QACff,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEc,QAAQ,CAAC;QACpD,IAAI,CAACZ,QAAQ,EAAE,CAAC,CAAC;QACjBa,KAAK,CAAC,oCAAoC,CAAC,CAAC,CAAC;MAC/C,CAAC;;MACDP,KAAK,EAAEA,KAAK,IAAG;QACbT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CO,KAAK,CAAC,yBAAyB,GAAGP,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC;MACpD;KACD,CAAC;EACJ;;EAGAE,YAAYA,CAACP,OAAe;IAC1B,IAAI,CAAC7B,cAAc,CAACmC,WAAW,CAACN,OAAO,CAAC,CAACN,SAAS,CAAC;MACjDC,IAAI,EAAEA,CAAA,KAAK;QACTS,KAAK,CAAC,8BAA8B,CAAC;QACrC,IAAI,CAACb,QAAQ,EAAE,CAAC,CAAC;MACnB,CAAC;;MACDM,KAAK,EAAGA,KAAK,IAAI;QACfT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CT,OAAO,CAACC,GAAG,CAAC,MAAM,GAAC,IAAI,CAAClB,cAAc,CAACmC,WAAW,CAACN,OAAO,CAAC,CAAC;QAC5DI,KAAK,CAAC,yBAAyB,IAAIP,KAAK,CAACA,KAAK,EAAEQ,OAAO,IAAIR,KAAK,CAACQ,OAAO,CAAC,CAAC;MAC5E;KACD,CAAC;EACJ;EACAG,YAAYA,CAACR,OAAc;IACzB,IAAI,CAAC5B,YAAY,CAACoC,YAAY,CAACR,OAAO,EAAC,SAAS,CAAC,CAACN,SAAS,CAAC;MAC1DC,IAAI,EAAEQ,QAAQ,IAAG;QACff,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEc,QAAQ,CAAC;QACpD,IAAI,CAACZ,QAAQ,EAAE,CAAC,CAAC;QACjBa,KAAK,CAAC,oCAAoC,CAAC,CAAC,CAAC;MAC/C,CAAC;;MACDP,KAAK,EAAEA,KAAK,IAAG;QACbT,OAAO,CAACS,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CO,KAAK,CAAC,wBAAwB,GAAGP,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC;MACnD;KACD,CAAC;EACJ;;EAEAI,YAAYA,CAACT,OAAe;IAC1B;IACA,MAAMU,OAAO,GAAG;MAAEC,UAAU,EAAE;IAAI,CAAE,CAAC,CAAE;IACvC,IAAI,CAACvC,YAAY,CAACwC,qBAAqB,CAACZ,OAAO,EAACU,OAAO,CAAC,CAAChB,SAAS,CAAC;MACjEC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAAC;MACnB,CAAC;;MACDM,KAAK,EAAGA,KAAK,IAAI;QACfT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CO,KAAK,CAAC,yBAAyB,GAAGP,KAAK,CAACQ,OAAO,CAAC;MAClD;KACD,CAAC;EACJ;EAEAQ,MAAMA,CAACb,OAAe,EAACc,KAAY;IACjC,IAAI,CAACC,WAAW,CAACf,OAAO,CAAC;IACzB,IAAI,CAACgB,OAAO,CAACF,KAAK,CAAC;EACrB;EAEAC,WAAWA,CAACf,OAAe;IACzB,IAAI,CAAC5B,YAAY,CAAC2C,WAAW,CAACf,OAAO,CAAC,CAACN,SAAS,CAACS,QAAQ,IAAG;MAC1D,IAAI,CAACZ,QAAQ,EAAE;IACjB,CAAC,CAAC;EACJ;EACAyB,OAAOA,CAACF,KAAY;IAElB,IAAI,CAAC5C,IAAI,CAAC+C,IAAI,CAAC,IAAI,CAACvC,MAAM,EAAEoC,KAAK,CAAC,CAACpB,SAAS,CAAC;MAC3CC,IAAI,EAAEA,CAAA,KAAK;QAAES,KAAK,CAAC,6BAA6B,CAAC;QACrC,IAAI,CAACb,QAAQ,EAAE;MAC3B,CAAC;MACDM,KAAK,EAAGqB,GAAG,IAAKd,KAAK,CAAC,0BAA0B,GAAGc,GAAG,CAACrB,KAAK;KAC7D,CAAC;EACJ;CAGD;AAhJY7B,gBAAgB,GAAAmD,UAAA,EAL5BrD,SAAS,CAAC;EACTsD,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWtD,gBAAgB,CAgJ5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}